FILE: nestedTypeAliasWithDeepInnerRHS.kt
    public final typealias TAtoInner = R|Outer.Inner|
    public final typealias TAtoInnerInner = R|Outer.Inner.InnerInner|
    public final typealias TAtoInnerNested = R|Outer.Inner.InnerNested|
    public final typealias TAtoNested = R|Outer.Nested|
    public final typealias TAtoNestedInner = R|Outer.Nested.NestedInner|
    public final class Outer : R|kotlin/Any| {
        public constructor(): R|Outer| {
            super<R|kotlin/Any|>()
        }

        public final inner class Inner : R|kotlin/Any| {
            public Outer.constructor(): R|Outer.Inner| {
                super<R|kotlin/Any|>()
            }

            public final inner class InnerInner : R|kotlin/Any| {
                public Outer.Inner.constructor(): R|Outer.Inner.InnerInner| {
                    super<R|kotlin/Any|>()
                }

            }

            public final class InnerNested : R|kotlin/Any| {
                public constructor(): R|Outer.Inner.InnerNested| {
                    super<R|kotlin/Any|>()
                }

            }

        }

        public final class Nested : R|kotlin/Any| {
            public constructor(): R|Outer.Nested| {
                super<R|kotlin/Any|>()
            }

            public final inner class NestedInner : R|kotlin/Any| {
                public Outer.Nested.constructor(): R|Outer.Nested.NestedInner| {
                    super<R|kotlin/Any|>()
                }

            }

        }

        public final typealias NestedTAtoInner = R|Outer.Inner|

        public final typealias NestedTAtoInnerInner = R|Outer.Inner.InnerInner|

        public final typealias NestedTAtoInnerNested = R|Outer.Inner.InnerNested|

        public final typealias NestedTAtoNested = R|Outer.Nested|

        public final typealias NestedTAtoNestedInner = R|Outer.Nested.NestedInner|

        public final fun test(): R|kotlin/Unit| {
            this@R|/Outer|.R|/Outer.Inner.Inner|()
            this@R|/Outer|.R|/Outer.Inner.InnerInner.InnerInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.InnerInner.InnerInner]>#|()
            R|/Outer.Inner.InnerNested.InnerNested|()
            R|/Outer.Nested.Nested|()
            this@R|/Outer|.R|/Outer.Nested.NestedInner.NestedInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Nested.NestedInner.NestedInner]>#|()
            this@R|/Outer|.R|/Outer.Inner.Inner|()
            this@R|/Outer|.R|/Outer.Inner.InnerInner.InnerInner|()
            R|/Outer.Inner.InnerNested.InnerNested|()
            R|/Outer.Nested.Nested|()
            this@R|/Outer|.R|/Outer.Nested.NestedInner.NestedInner|()
        }

    }
    public final fun testOuter(): R|kotlin/Unit| {
        lval outer: R|Outer| = R|/Outer.Outer|()
        R|<local>/outer|.R|/Outer.Inner.Inner|()
        R|<local>/outer|.R|/Outer.Inner.InnerInner.InnerInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.InnerInner.InnerInner]>#|()
        R|<local>/outer|.<Unresolved name: TAtoInnerNested>#()
        R|<local>/outer|.<Unresolved name: TAtoNested>#()
        R|<local>/outer|.R|/Outer.Nested.NestedInner.NestedInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Nested.NestedInner.NestedInner]>#|()
        R|<local>/outer|.R|/Outer.Inner.Inner|()
        R|<local>/outer|.R|/Outer.Inner.InnerInner.InnerInner|()
        R|<local>/outer|.<Unresolved name: NestedTAtoInnerNested>#()
        R|<local>/outer|.<Unresolved name: NestedTAtoNested>#()
        R|<local>/outer|.R|/Outer.Nested.NestedInner.NestedInner|()
    }
    public final fun testInner(): R|kotlin/Unit| {
        lval inner: R|Outer.Inner| = R|/Outer.Outer|().R|/Outer.Inner.Inner|()
        R|<local>/inner|.R|/Outer.Inner.Inner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.Inner]>#|()
        R|<local>/inner|.R|/Outer.Inner.InnerInner.InnerInner|()
        R|<local>/inner|.<Unresolved name: TAtoInnerNested>#()
        R|<local>/inner|.<Unresolved name: TAtoNested>#()
        R|<local>/inner|.R|/Outer.Nested.NestedInner.NestedInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Nested.NestedInner.NestedInner]>#|()
        R|<local>/inner|.<Unresolved name: NestedTAtoInner>#()
        R|<local>/inner|.<Unresolved name: NestedTAtoInnerInner>#()
        R|<local>/inner|.<Unresolved name: NestedTAtoInnerNested>#()
        R|<local>/inner|.<Unresolved name: NestedTAtoNested>#()
        R|<local>/inner|.<Unresolved name: NestedTAtoNestedInner>#()
    }
    public final fun testInnerInner(): R|kotlin/Unit| {
        lval innerInner: R|Outer.Inner.InnerInner| = R|/Outer.Outer|().R|/Outer.Inner.Inner|().R|/Outer.Inner.InnerInner.InnerInner|()
        R|<local>/innerInner|.R|/Outer.Inner.Inner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.Inner]>#|()
        R|<local>/innerInner|.R|/Outer.Inner.InnerInner.InnerInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.InnerInner.InnerInner]>#|()
        R|<local>/innerInner|.<Unresolved name: TAtoInnerNested>#()
        R|<local>/innerInner|.<Unresolved name: TAtoNested>#()
        R|<local>/innerInner|.R|/Outer.Nested.NestedInner.NestedInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Nested.NestedInner.NestedInner]>#|()
        R|<local>/innerInner|.<Unresolved name: NestedTAtoInner>#()
        R|<local>/innerInner|.<Unresolved name: NestedTAtoInnerInner>#()
        R|<local>/innerInner|.<Unresolved name: NestedTAtoInnerNested>#()
        R|<local>/innerInner|.<Unresolved name: NestedTAtoNested>#()
        R|<local>/innerInner|.<Unresolved name: NestedTAtoNestedInner>#()
    }
    public final fun testNested(): R|kotlin/Unit| {
        lval nested: R|Outer.Nested| = Q|Outer|.R|/Outer.Nested.Nested|()
        R|<local>/nested|.R|/Outer.Inner.Inner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.Inner]>#|()
        R|<local>/nested|.R|/Outer.Inner.InnerInner.InnerInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.InnerInner.InnerInner]>#|()
        R|<local>/nested|.<Unresolved name: TAtoInnerNested>#()
        R|<local>/nested|.<Unresolved name: TAtoNested>#()
        R|<local>/nested|.R|/Outer.Nested.NestedInner.NestedInner|()
        R|<local>/nested|.<Unresolved name: NestedTAtoInner>#()
        R|<local>/nested|.<Unresolved name: NestedTAtoInnerInner>#()
        R|<local>/nested|.<Unresolved name: NestedTAtoInnerNested>#()
        R|<local>/nested|.<Unresolved name: NestedTAtoNested>#()
        R|<local>/nested|.<Unresolved name: NestedTAtoNestedInner>#()
    }
    public final fun testNestedInner(): R|kotlin/Unit| {
        lval nestedInner: R|Outer.Nested.NestedInner| = Q|Outer|.R|/Outer.Nested.Nested|().R|/Outer.Nested.NestedInner.NestedInner|()
        R|<local>/nestedInner|.R|/Outer.Inner.Inner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.Inner]>#|()
        R|<local>/nestedInner|.R|/Outer.Inner.InnerInner.InnerInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.InnerInner.InnerInner]>#|()
        R|<local>/nestedInner|.<Unresolved name: TAtoInnerNested>#()
        R|<local>/nestedInner|.<Unresolved name: TAtoNested>#()
        R|<local>/nestedInner|.R|/Outer.Nested.NestedInner.NestedInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Nested.NestedInner.NestedInner]>#|()
        R|<local>/nestedInner|.<Unresolved name: NestedTAtoInner>#()
        R|<local>/nestedInner|.<Unresolved name: NestedTAtoInnerInner>#()
        R|<local>/nestedInner|.<Unresolved name: NestedTAtoInnerNested>#()
        R|<local>/nestedInner|.<Unresolved name: NestedTAtoNested>#()
        R|<local>/nestedInner|.<Unresolved name: NestedTAtoNestedInner>#()
    }
