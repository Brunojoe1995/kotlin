/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.gradle.plugin.diagnostics

import org.jetbrains.kotlin.gradle.InternalKotlinGradlePluginApi

/**
 * Represents a diagnostic message generated by tooling within the Kotlin Gradle Plugin.
 *
 * @property identifier An identifier containing unique ID and a display name for the diagnostic.
 * @property message The core message of the diagnostic, offering details about the issue.
 * @property severity The severity level of the diagnostic (e.g., WARNING, ERROR, or FATAL).
 * @property solutions A list of potential solutions or steps to address the diagnostic issue.
 * @property documentation Optional documentation providing additional context or resources.
 * @property throwable Optional exception related to the diagnostic issue if applicable.
 */
@InternalKotlinGradlePluginApi // used in integration tests
data class ToolingDiagnostic(
    val identifier: ID,
    val message: String,
    val severity: Severity,
    val solutions: List<String>,
    val documentation: Documentation? = null,
    val throwable: Throwable? = null,
) {
    /**
     * Represents an identifier associated with a [ToolingDiagnostic].
     *
     * @property id A unique string identifier for the diagnostic.
     * @property displayName A user-friendly name associated with the diagnostic.
     * @property group The diagnostic group to which this identifier belongs.
     */
    data class ID(val id: String, val displayName: String, val group: ToolingDiagnosticGroup) {
        override fun toString(): String {
            return "$id | $displayName | $group"
        }
    }

    /**
     * Represents the documentation associated with a particular issue or diagnostic in the system.
     *
     * @property url The URL pointing to the primary documentation resource.
     * @property additionalUrlContext The additional text to the [url] providing hints or context for better understanding.
     */
    data class Documentation(val url: String, val additionalUrlContext: String)

    enum class Severity {
        /**
         * More visible than most of the output (intuition: yellow-highlighting).
         * Doesn't prevent the build from running.
         *
         * Use for non-critical misconfigurations with low rate of false-positives
         */
        WARNING,

        /**
         * Heavily emphasized in the output (intuition: bold red highlighting).
         *
         * ATTENTION. If a diagnostic with this severity is reported, Kotlin compiler
         * will _not_ be invoked (build will appear failed, as with compilation error)
         *
         * However, Gradle IDE Sync and other tasks that are not connected with
         * any of the Kotlin Compiler and tools (e.g. 'help', 'clean'), will run successfully.
         *
         * Use for critical misconfigurations that need immediate addressing
         */
        ERROR,

        /**
         * Aborts the progress of the current process (Gradle build/Import/...).
         *
         * Please use *extremely* sparingly, as failing the current process can:
         * - mask further errors (forcing users to make multiple runs before fixing all issues)
         *
         * - lead to unpleasant UX in IDE (if the failure happens during import, then depending
         *   on when it happened users might not have even basic IDE assistance, which makes fixing
         *   the root cause very annoying)
         *
         * Use for irreconcilable misconfigurations / malformed input which prevent further
         * configuration _and_ when the graceful degradation (allowing configuration phase to finish)
         * is too expensive.
         */
        FATAL,
    }

    val id: String get() = identifier.id
    val group: ToolingDiagnosticGroup get() = identifier.group

    override fun toString() = buildString {
        append("[$id | $severity]")

        val subLines = solutions + listOfNotNull(documentation?.additionalUrlContext)

        if (subLines.isEmpty()) {
            append(" $message")
        } else {
            appendLine(" $message")
        }

        appendSubLines(subLines.filter { it.isNotBlank() })
    }
}

private fun StringBuilder.appendSubLines(subLines: List<String>) {
    subLines.forEachIndexed { index, line ->
        if (index == subLines.size - 1) {
            append(line)
        } else {
            appendLine(line)
        }
    }
}

/**
 * Represents a hierarchical grouping of tooling diagnostics.
 * Designed to handle diagnostic information in tooling systems.
 *
 * @property groupId The group associated with this diagnostic group.
 * @property parent The parent diagnostic group, if applicable.
 */
sealed class ToolingDiagnosticGroup(val groupId: Group, val parent: ToolingDiagnosticGroup? = null) {
    /**
     * Represents a categorized group within ToolingDiagnosticGroup.
     * Each group serves as an identifier for diagnostic purposes.
     */
    enum class Group {
        KOTLIN,
        KGP,
        COCOAPODS,
        COMPOSE
    }

    /**
     * Represents the unique identifier for the tooling diagnostic group.
     * This is typically derived from the name of the associated group ID.
     */
    open val identifier: String get() = groupId.name

    /**
     * Represents the display name of this tooling diagnostic group.
     *
     * The display name is derived from the name of the associated groupId.
     * It is used to provide a user-friendly, human-readable representation
     * for a tooling diagnostic group.
     */
    open val displayName: String get() = groupId.name

    /**
     * Represents a diagnostic group specifically for Kotlin-related diagnostics.
     *
     * Inherits from the base `ToolingDiagnosticGroup` with the group identifier set to `KOTLIN`.
     * This object serves as a predefined grouping of tooling diagnostics for the Kotlin language.
     */
    object KotlinDiagnosticGroup : ToolingDiagnosticGroup(Group.KOTLIN) {
        override val displayName: String = "Kotlin"
    }

    /**
     * Represents a diagnostic group specific to Kotlin Gradle Plugin (KGP) diagnostics.
     *
     * This data class is a specialized subclass of `ToolingDiagnosticGroup`, designed to handle
     * diagnostic information relevant to the Kotlin Gradle Plugin. It categorizes diagnostics
     * into specific categories defined in the `Category` enum.
     *
     * @property category The specific category of diagnostics within the KGP diagnostic group.
     */
    data class KGPDiagnosticGroup(val category: Category? = null) : ToolingDiagnosticGroup(Group.KGP, KotlinDiagnosticGroup) {

        /**
         * Defines categories used to classify diagnostics within the Kotlin Gradle Plugin (KGP).
         *
         * These categories help group and identify diagnostics based on their nature or purpose:
         * - DEPRECATION: Indicates features or configurations that are deprecated.
         * - MISCONFIGURATION: Represents issues caused by incorrect setup or configuration.
         * - EXPERIMENTAL: Refers to features or functionalities that are experimental.
         */
        enum class Category {
            DEPRECATION,
            MISCONFIGURATION,
            EXPERIMENTAL
        }

        override val identifier: String
            get() = category?.let {
                "${super.identifier}_${it.name}"
            } ?: super.identifier

        override val displayName: String = when (category) {
            Category.DEPRECATION -> "Kotlin Gradle Plugin Deprecation"
            Category.MISCONFIGURATION -> "Kotlin Gradle Plugin Misconfiguration"
            Category.EXPERIMENTAL -> "Kotlin Gradle Plugin Experimental Feature"
            else -> "Kotlin Gradle Plugin"
        }
    }

    /**
     * Represents a diagnostic group specifically for CocoaPods-related tooling in Kotlin projects.
     *
     * This object extends `ToolingDiagnosticGroup` and associates diagnostics with the CocoaPods group.
     * It inherits diagnostic behaviors and functionality from the base `KGPDiagnosticGroup`, which is
     * tailored for Kotlin Gradle Plugin (KGP) diagnostics. The `Group.COCOAPODS` enumeration value serves
     * as the identifier for this diagnostic group.
     */
    object CocoaPodsDiagnosticGroup : ToolingDiagnosticGroup(Group.COCOAPODS, KGPDiagnosticGroup()) {
        override val displayName: String = "CocoaPods PlugIn"
    }

    /**
     * Represents a specialized diagnostic group for the Compose plugin.
     *
     * This object is a subclass of `ToolingDiagnosticGroup`, specifically categorized under
     * the `Group.COMPOSE` umbrella. It encapsulates diagnostic data and acts as a named
     * grouping entity for diagnostics related to Compose plugin tooling.
     */
    object ComposeDiagnosticGroup : ToolingDiagnosticGroup(Group.COMPOSE, KGPDiagnosticGroup()) {
        override val displayName: String = "Compose PlugIn"
    }

    override fun toString() = "$identifier | $displayName | parent: [$parent]"
}